[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis and Visualisation with R",
    "section": "",
    "text": "A core element of the AAU Information Studies degree is learning about data analysis and visualization. To teach you these skills, we use the statistical programming language R. Specifically, we will use the Tidyverse, an opinionated collection of R packages that share an underlying design philosophy, grammar, and data structures."
  },
  {
    "objectID": "index.html#about-this-website",
    "href": "index.html#about-this-website",
    "title": "Data Analysis and Visualisation with R",
    "section": "About this website",
    "text": "About this website\nAt AAU we use Moodle to inform you about the different modules, their content and distribute reading and exercise material. We will touch on R in various classes in two different modules Research Methods in Information Studies and User Studies and Information Behaviour. This can be confusing, that is why this website is thought to collect all R related teaching in one space and covers all aspects that happen in class. This means, this website is substituting the course slides. Additional material for e.g. preparation before class like reading material can be found on Moodle."
  },
  {
    "objectID": "index.html#r-and-rstudio-set-up",
    "href": "index.html#r-and-rstudio-set-up",
    "title": "Data Analysis and Visualisation with R",
    "section": "R and RStudio Set-up",
    "text": "R and RStudio Set-up\nChester Ismay and Albert Kim, the authors of Moderndive an introductory book to Data Science using R and the Tidyverse, describe it like this: R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. You need to install both parts to get everything to work. You can find the links to download both from Posit’s website. A detailed guide can also be found on the Moderndive website."
  },
  {
    "objectID": "index.html#some-general-tips",
    "href": "index.html#some-general-tips",
    "title": "Data Analysis and Visualisation with R",
    "section": "Some general tips",
    "text": "Some general tips\n\nAs a beginner it is always good to take a \"copy - paste - adpat\" approach to coding. Copy code from when you solved the same/similar problems, paste it and adapt it to the current situation (e.g. change the data frame and variable name).This is - especially at the beginning - easier than writing everything from scratch.\nDon’t despair if your code throws an error. You can:\n\nPut the error message in a search engine and look at the results. Most likely someone had the same issue before and asked about it on Stackoverflow.\nUse ChatGPT to come up with a suggestion on how to solve the problem.\n\nYou want your object (e.g. data.frames, vectors or functions) to be descriptive, so you’ll need a convention for multiple words. Hadley Wickham recommends snake_case where you separate lowercase words with _. E.g.:\n\npenguins_data\nusasbility_test_results_1\nparticipant_ids\ncalc_sus()\n\n… to be continued()"
  },
  {
    "objectID": "content/Session1.html",
    "href": "content/Session1.html",
    "title": "Part1:Collection, cleaning and transformation",
    "section": "",
    "text": "In preparation for the first session, please work yourself through the intro_new.R file. You can download the file from Moodle or copy paste the parts from here, and put it into a new file. You can create a new file in RStudio via File -&gt; New file -&gt; R Script.\n\n\nShow/Hide Code\n#######\n## Introduction to programming // R 101\n######\n\n\n#### \n# Watch the following videos that explain the main components of R\n# Functions: https://vimeo.com/220490105\n# -----------------------------------------\n# Arguments: https://vimeo.com/220490157\n#------------------------------------------\n# Objects: https://vimeo.com/220493412 \n# -----------------------------------------\n# Vectors: https://vimeo.com/220490316 \n# -----------------------------------------\n# Data Types: https://vimeo.com/220490241 \n\n\n#### \n# 1. Now try to solve the following tasks:\n\n# 1.1 Execute the following lines. Try to explain the differences between line 28, 30 and 31?\n5+4\na &lt;- 5\nb &lt;- 4\nc &lt;- a - b\nd &lt;- c(a,b)\nsum(a,b)\nmax(a,b)\ne &lt;- sum(a,b)\nf &lt;- a + b \n\n\n\n# 1.2 Why does the following snippet return NA?\n# What does NA mean? (try to google for it)\n# What can you do to make it return a number? (look in the documentation for help)\nsum(1,2,3,7,NA)\n\n\n\n# 1.3 Investigate the following four vectors:\n# Use the function typeof() to investigate each vectors datatype\n# What is suprising about v4? Can you explain what happened?\n# How can you check whether 6 is part of v3?\n# Use length() to check whether v1 and v2 are of similar length?\nv1 &lt;- c('one','two','three','four')\nv2 &lt;- c('1','2','3','4')\nv3 &lt;- c(1,2,3,4,5)\nv4 &lt;- c(1,'two',3)\n\n\n\n#2.Investigate the built in data-set 'mtcars'. \n# Use str(mtcars) to answer the following questions:\n\n    # Which data type does the data-set have?\n    # How many variables and observartions does the data-set have?\n    # Call the help function for the data-set \n    # to find out about the meaning of the variables\n    # Select three variables of the data set and save them in a \n    # single new vector, one for each\n    # Can you select a single row of the data frame using base R only? \n    # Try to google/use stackoverflow for help!\n\n\n\n\n\n###########\n# Finally watch the video on packages in R\n# Packages: https://vimeo.com/220490447 \n\n# Install the package tidyverse and make it available for use\n\n# To check whether you were successful try to \n# run the following code snippet: \n\nggplot(data = diamonds) +\n     geom_bar(mapping = aes(x = cut))"
  },
  {
    "objectID": "content/Session1.html#r-basics-with-intro_new.r",
    "href": "content/Session1.html#r-basics-with-intro_new.r",
    "title": "Part1:Collection, cleaning and transformation",
    "section": "",
    "text": "In preparation for the first session, please work yourself through the intro_new.R file. You can download the file from Moodle or copy paste the parts from here, and put it into a new file. You can create a new file in RStudio via File -&gt; New file -&gt; R Script.\n\n\nShow/Hide Code\n#######\n## Introduction to programming // R 101\n######\n\n\n#### \n# Watch the following videos that explain the main components of R\n# Functions: https://vimeo.com/220490105\n# -----------------------------------------\n# Arguments: https://vimeo.com/220490157\n#------------------------------------------\n# Objects: https://vimeo.com/220493412 \n# -----------------------------------------\n# Vectors: https://vimeo.com/220490316 \n# -----------------------------------------\n# Data Types: https://vimeo.com/220490241 \n\n\n#### \n# 1. Now try to solve the following tasks:\n\n# 1.1 Execute the following lines. Try to explain the differences between line 28, 30 and 31?\n5+4\na &lt;- 5\nb &lt;- 4\nc &lt;- a - b\nd &lt;- c(a,b)\nsum(a,b)\nmax(a,b)\ne &lt;- sum(a,b)\nf &lt;- a + b \n\n\n\n# 1.2 Why does the following snippet return NA?\n# What does NA mean? (try to google for it)\n# What can you do to make it return a number? (look in the documentation for help)\nsum(1,2,3,7,NA)\n\n\n\n# 1.3 Investigate the following four vectors:\n# Use the function typeof() to investigate each vectors datatype\n# What is suprising about v4? Can you explain what happened?\n# How can you check whether 6 is part of v3?\n# Use length() to check whether v1 and v2 are of similar length?\nv1 &lt;- c('one','two','three','four')\nv2 &lt;- c('1','2','3','4')\nv3 &lt;- c(1,2,3,4,5)\nv4 &lt;- c(1,'two',3)\n\n\n\n#2.Investigate the built in data-set 'mtcars'. \n# Use str(mtcars) to answer the following questions:\n\n    # Which data type does the data-set have?\n    # How many variables and observartions does the data-set have?\n    # Call the help function for the data-set \n    # to find out about the meaning of the variables\n    # Select three variables of the data set and save them in a \n    # single new vector, one for each\n    # Can you select a single row of the data frame using base R only? \n    # Try to google/use stackoverflow for help!\n\n\n\n\n\n###########\n# Finally watch the video on packages in R\n# Packages: https://vimeo.com/220490447 \n\n# Install the package tidyverse and make it available for use\n\n# To check whether you were successful try to \n# run the following code snippet: \n\nggplot(data = diamonds) +\n     geom_bar(mapping = aes(x = cut))"
  },
  {
    "objectID": "content/Session1.html#intalling-and-loading-packages",
    "href": "content/Session1.html#intalling-and-loading-packages",
    "title": "Part1:Collection, cleaning and transformation",
    "section": "Intalling and loading packages",
    "text": "Intalling and loading packages\nBase R can easily be extended by additional functions, data and routines that are wrapped in so called packages. R has a large community that develops packages on a daily basis which makes the programming language so accessible and versatile. Packages can either be installed via the RStudio GUI or via the console/your R code. You use the function install.packages() and put in the name of the package. As mentioned earlier we will use the tidyverse. We also start with a packages that gives us access to a popular data set, the palmer penguins data. After installing the packages you also need to make them accessible. This you do by using the function require() or library(). Note that packages only need to be installed once. However, everytime you reopen your RStudio, you also need to make the package accessible again via either require() or library().\n\n\nShow/Hide Code\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\nrequire(tidyverse)\nrequire(palmerpenguins)\n\n\n\nLet them eat cake\nLet’s have a look at the penguins data and do a first little bar chart of the penguins.\n\n\nShow/Hide Code\n# We save the built-in dataset into a data.frame/tibble that lives in your environment.\npenguins_data&lt;-penguins\npenguins_data\n\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nShow/Hide Code\npenguins_data%&gt;%ggplot(aes(species))+geom_bar()\n\n\n\n\n\n\n\nImporting data from files\nThe tidyverse has a package called readr that is specifically dedicated to load various kinds of files, e.g. .csv, .tsv, excel and so on. You can also import data from databases (SQLite or no-sql like CouchDB). Let’s have a quick look We will perform some exercises with the fake usability test data I mentioned in class. For this purpose please download the file usability_test_results.csv from Moodle.\n\n\nShow/Hide Code\nusability_test_results &lt;- read_csv(\"usability_test_results.csv\")\n\n\nRows: 30 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): participant_id, timestamp, age, gender, country_of_nationality, ed...\ndbl (11): trips_per_year, countries_visited, completion_task1, seq_task1, to...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "content/Session1.html#dplyr-basics",
    "href": "content/Session1.html#dplyr-basics",
    "title": "Part1:Collection, cleaning and transformation",
    "section": "Dplyr basics",
    "text": "Dplyr basics\nDplyr works with the pipe symbol %&gt;%. Usually you start with the data frame that you want to manipulate, followed by the first dplyr verb. E.g: penguins_data%&gt;%filter() or penguins_data%&gt;%select. You can chain the verbs as much as you want and create data manipulation pipelines. E.g: penguins_data%&gt;%filter(...)%&gt;%select(...). We will see more examples further below.\n\nFilter()\nNow we get to know the verbs that are part of dplyr. We start with the filter() function and the different logical operators e.g.AND, OR, NOT, is.na(). We will aim at answering the following questions:\n\nFind all penguins that were found on island Dream\nFind all penguins that are heavier than 4 kg\nFind all penguins that are female and heavier than 4 kg\nAre there more male or female penguins that are heavier than 4kg?\nFind all penguins where the sex is not missing (NA)\n\n\n\nShow/Hide Code\n# We start off by learning about filter()\n\n# We want the ones that lived on island Dream\npenguins_data%&gt;%filter(island=='Dream')%&gt;%view()\n\n# We want the ones heavier than 4kg\npenguins_data%&gt;%filter(body_mass_g&gt;4000)%&gt;%nrow()\n\n\n[1] 172\n\n\nShow/Hide Code\n# We ant to have all females heavier than 4000\npenguins_data%&gt;%filter(body_mass_g&gt;4000)%&gt;%\n                    filter(sex=='female')%&gt;%view()\n\n# another way is using only one filter\npenguins_data%&gt;%filter(body_mass_g&gt;4000,sex=='female')%&gt;%nrow()\n\n\n[1] 58\n\n\nShow/Hide Code\n# Are there more male penguins \npenguins_data%&gt;%filter(body_mass_g&gt;4000,sex=='male')%&gt;%nrow()\n\n\n[1] 109\n\n\nShow/Hide Code\n# We want to filter out the penguins with missing sex\npenguins_complete_sex&lt;-penguins_data%&gt;%filter(!is.na(sex))\n\n\nNow we perform some exercises with the usability_test_results.csv. We try to answer the following questions:\n\nFind all participants that are from Denmark\nFind all participants that successfully completed task 3\nFind all participants that have a bachelor and whose favorite country is Japan\nFind all participants whose favorite country is Germany or Italy\nAdvanced : Find all participants whose time on task2 #lies above the average for that task\n Advanced : Filter based on %in%: Exclude participants from United States, Canada Mexico.\n\n\n\nShow/Hide Code\n# Find all participants that are from Denmark\nusability_test_results%&gt;%filter(country_of_nationality=='Denmark')%&gt;%view()\n\n# Find all participants that successfully completed task 3\nusability_test_results%&gt;%filter(completion_task3==1)%&gt;%view()\n\n# Find all participants that have a bachelor and whose favorite country\n# is Japan\nusability_test_results%&gt;%filter(education=='Bachelor',\n                                favority_country=='Japan')%&gt;%view()\n\n# Find all participants whose favorite country is germany or italy\nusability_test_results%&gt;%\n        filter(favority_country=='Germany'|favority_country=='Italy')%&gt;%view()\n\n#Find all participants whose time on task2 \n#lies above the average for that task\n\nusability_test_results%&gt;%filter(mean(tot_task2)&lt;tot_task2)%&gt;%view()\n\n#Use base are style of writing to calculate an average\nmean(usability_test_results$tot_task2)\n\n\n[1] 44.83333\n\n\nShow/Hide Code\n# Show an example of how to use %in% to filter by values\n# of a vector\ncountries_to_filter&lt;-c('United States','Canada','Mexico')\n\nusability_test_results%&gt;%\n  filter(!country_of_nationality%in%countries_to_filter)%&gt;%\n      view()\n\n\n\n\nArrange()\nSorting your data can be important to get an overview of the data but also for certain processing tasks. You can sort using the arrange() function. Per default arrange sorts ascending i.e. from lowest to highest. Use the desc() inside arrange to sort from high to low.\n\n\nShow/Hide Code\n# Now we want to look at sorting data with arrange()\n\npenguins_data%&gt;%arrange(flipper_length_mm)%&gt;%view()\n\npenguins_data%&gt;%arrange(desc(body_mass_g))%&gt;%view()\n\npenguins_data%&gt;%arrange(-body_mass_g)%&gt;%view()\n\npenguins_data%&gt;%arrange(bill_length_mm,bill_depth_mm)%&gt;%view()\n\n\n# Two exercises with the usability_test_data\n\n# Sort the test data based on the country of origin of the participants \n\n# Sort the test data based on subjective task difficulty (seq_task1)\nusability_test_results%&gt;%arrange(-seq_task1,-seq_task2,-seq_task3)%&gt;%view()\n\n\n\n\nSelect()\nIt is often the case that you only need a subset of the data for further processing or visualisation. In these situations the select() function becomes handy, as it allows us to select only the needed columns or variables from the data.frame. Select() has many different ways of how it can be used. Here it is worth to look at the documentation to get an overview of what the options are.\n\n\nShow/Hide Code\n# Let's now look into selecting different columnns\n# we use the select() function for that \n\n# by column name\npenguins_data%&gt;%select(species,island,body_mass_g)\n\n\n# A tibble: 344 × 3\n   species island    body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;int&gt;\n 1 Adelie  Torgersen        3750\n 2 Adelie  Torgersen        3800\n 3 Adelie  Torgersen        3250\n 4 Adelie  Torgersen          NA\n 5 Adelie  Torgersen        3450\n 6 Adelie  Torgersen        3650\n 7 Adelie  Torgersen        3625\n 8 Adelie  Torgersen        4675\n 9 Adelie  Torgersen        3475\n10 Adelie  Torgersen        4250\n# ℹ 334 more rows\n\n\nShow/Hide Code\n# select by range\n\npenguins_data%&gt;%select(bill_length_mm:body_mass_g)%&gt;%view()\n\n# select by column number\npenguins_data%&gt;%select(1,7)%&gt;%view()\n\n# select ALL columns but an exception \npenguins_data%&gt;%select(-island)%&gt;%view()\n  \n# you can use function within select\n# for example starts_with(), ends_with(), contains()\n\npenguins_data%&gt;%select(species,starts_with('bill_'))%&gt;%view()\n\n\nNow it is on you again, to perform some exercises with the usability_test_results.csv. Try do do the following:\n\nCreate a data frame that only contains the columns: participant_id, age, and trips per year.\nCreate a data frame that contains column 2 and tot_task3.\nCreate a data frame that contains participant_id and all columns that are related to task1.\n\n\n\nShow/Hide Code\n#Select participant_id, age and trips per year\nusability_test_results%&gt;%select(participant_id,age,trips_per_year)\n\n\n# A tibble: 30 × 3\n   participant_id age   trips_per_year\n   &lt;chr&gt;          &lt;chr&gt;          &lt;dbl&gt;\n 1 id_1           22-29             15\n 2 id_2           22-29             10\n 3 id_3           51-64              0\n 4 id_4           19-21              5\n 5 id_5           30-40              3\n 6 id_6           19-21              5\n 7 id_7           51-64              4\n 8 id_8           22-29              2\n 9 id_9           22-29             13\n10 id_10          22-29              4\n# ℹ 20 more rows\n\n\nShow/Hide Code\n#Select the second and the last column\nusability_test_results%&gt;%select(2,tot_task3)%&gt;%view()\n\n#Select participant_id and all column related to task1\nusability_test_results%&gt;%select(participant_id,\n                            contains(\"task1\"))%&gt;%view()\n\n# Let's do some renaming of column names \n\npenguins_data%&gt;%rename(weight=body_mass_g)%&gt;%view()\n\n\n\n\nData manipulation pipelines\nYou can combine the verbs in any way you want and chain them one after another. E.g. filter %&gt;% filter %&gt;% select %&gt;% filter is possible. But be aware to only filter on columns that still exist!\n\n\nShow/Hide Code\npenguins_new&lt;-penguins_data%&gt;%filter(island=='Dream'|island=='Torgersen')%&gt;%\n                                filter(sex=='male')%&gt;%\n                                select(species,body_mass_g)\n\n# or an example with the usability_test_results \n\nusability_test_results%&gt;%filter(education=='Bachelor')%&gt;%\n                          filter(completion_task3==1)%&gt;%\n                            select(participant_id)\n\n\n# A tibble: 9 × 1\n  participant_id\n  &lt;chr&gt;         \n1 id_3          \n2 id_4          \n3 id_8          \n4 id_9          \n5 id_11         \n6 id_23         \n7 id_24         \n8 id_25         \n9 id_27         \n\n\n\n\nWrite data to file\nFinally, we want to write a data to file, so we can reload it later on. We have two options: * Write the data to an .Rdata file, R’s customs binary format, using write_rds(). This file can then be loaded via read_rds(). * Write to a .csv file - increased interoperability and better for sharing with others. readr has a specific function that let’s you create .csv files that are easy to open in excel: write_excel_csv().\n\n\nShow/Hide Code\npenguins_new&lt;-penguins_data%&gt;%filter(island=='Dream'|island=='Torgersen')%&gt;%\n                                filter(sex=='male')%&gt;%\n                                select(species,body_mass_g)\n\nwrite_rds(penguins_new,'penguins_new.rds')\n\n# Let's use the usability_test_results \n# We want to get all participants in the age group 22-29\n# We want that they completed task 2 \n# And then we want all columns related to that task (task2)\nusability_new&lt;-usability_test_results%&gt;%\n            filter(age=='22-29',completion_task2=='1')%&gt;%\n                select(contains('task2'))\n\nwrite_excel_csv(x = usability_new,'usablity_new.csv')"
  }
]